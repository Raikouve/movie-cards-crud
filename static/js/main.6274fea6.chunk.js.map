{"version":3,"sources":["components/Loading.js","components/MovieForm.js","components/MovieCard.js","services/movieData.js","services/movieAPI.js","pages/MovieList.js","pages/MovieDetails.js","pages/NewMovie.js","pages/EditMovie.js","pages/NotFound.js","App.js","serviceWorker.js","index.js"],"names":["Loading","className","Component","MovieForm","props","state","movie","handleSubmit","bind","onSubmit","this","field","newValue","setState","title","htmlFor","placeholder","id","type","value","onChange","event","updateMovie","target","subtitle","imagePath","storyline","genre","rating","step","min","max","onClick","renderTitleInput","renderSubtitleInput","renderImagePathInput","renderStorylineInput","renderGenreSelection","renderRatingInput","renderSubmitButton","React","MovieCard","src","alt","to","movies","bookmarked","localStorage","setItem","JSON","stringify","data","readMovies","parse","getItem","saveMovies","SUCCESS_STATUS","simulateRequest","response","callback","setTimeout","getMovie","movieId","find","mov","parseInt","Promise","resolve","updatedMovie","map","MovieList","fetchMovies","loading","a","MovieDetails","fetchMovie","params","match","movieAPI","filter","status","NewMovie","shouldRedirect","newMovie","movieData","nextId","length","EditMovie","requestMovie","NotFound","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6274fea6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Loading extends Component {\n  render() {\n    return (\n      <div className=\"w-full h-screen flex justify-center items-center font-bold text-xl text-white\">Carregando...</div>\n    );\n  }\n}\n\nexport default Loading;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass MovieForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { ...props.movie };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleSubmit() {\n    const { onSubmit } = this.props;\n    onSubmit(this.state);\n  }\n\n  updateMovie(field, newValue) {\n    this.setState({ [field]: newValue });\n  }\n\n  renderTitleInput() {\n    const { title } = this.state;\n\n    return (\n      <div>\n        <label className=\"edit-label\" htmlFor=\"movie_title\">\n          Título\n          <input\n            placeholder=\"Insira o título\"\n            id=\"movie_title\"\n            type=\"text\"\n            className=\"validate edit-input\"\n            value={ title }\n            onChange={ (event) => this.updateMovie('title', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubtitleInput() {\n    const { subtitle } = this.state;\n\n    return (\n      <div>\n        <label className=\"edit-label\" htmlFor=\"movie_subtitle\">\n          Subtítulo\n          <input\n            placeholder=\"Insira o subtítulo\"\n            id=\"movie_subtitle\"\n            type=\"text\"\n            className=\"edit-input\"\n            value={ subtitle }\n            onChange={ (event) => this.updateMovie('subtitle', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderImagePathInput() {\n    const { imagePath } = this.state;\n\n    return (\n      <div className=\"row\">\n        <label className=\"edit-label\" htmlFor=\"movie_image\">\n          Imagem\n          <input\n            placeholder=\"Insira o caminho da imagem\"\n            id=\"movie_image\"\n            type=\"text\"\n            className=\"edit-input\"\n            value={ imagePath }\n            onChange={ (event) => this.updateMovie('imagePath', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderStorylineInput() {\n    const { storyline } = this.state;\n\n    return (\n      <div>\n        <label className=\"edit-label\" htmlFor=\"movie_storyline\">\n          Sinopse\n          <textarea\n            className=\"text-area\"\n            id=\"movie_storyline\"\n            value={ storyline }\n            onChange={ (event) => this.updateMovie('storyline', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderGenreSelection() {\n    const { genre } = this.state;\n    return (\n      <div>\n        <label className=\"edit-label\" htmlFor=\"movie_genre\">\n          Gênero\n          <select\n            id=\"movie_genre\"\n            value={ genre }\n            className=\"edit-input\"\n            onChange={ (event) => this.updateMovie('genre', event.target.value) }\n          >\n            <option value=\"action\">Ação</option>\n            <option value=\"comedy\">Comédia</option>\n            <option value=\"thriller\">Suspense</option>\n            <option value=\"fantasy\">Fantasia</option>\n          </select>\n        </label>\n      </div>\n    );\n  }\n\n  renderRatingInput() {\n    const { rating } = this.state;\n    return (\n      <div>\n        <label className=\"edit-label\" htmlFor=\"movie_rating\">\n          Avaliação\n          <input\n            placeholder=\"Avaliação\"\n            id=\"movie_rating\"\n            type=\"number\"\n            step={ 0.1 }\n            min={ 0 }\n            max={ 5 }\n            value={ rating }\n            className=\"edit-input\"\n            onChange={ (event) => this.updateMovie('rating', event.target.value) }\n          />\n        </label>\n      </div>\n    );\n  }\n\n  renderSubmitButton() {\n    return (\n      <div>\n        <button\n          className=\"bg-red-700 px-4 py-2 rounded text-white hover:bg-red-600 transition duration-300\"\n          type=\"button\"\n          onClick={ this.handleSubmit }\n        >\n          <span className=\"font-semibold\">Concluir</span>\n        </button>\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div>\n        <form>\n          {this.renderTitleInput()}\n          {this.renderSubtitleInput()}\n          {this.renderImagePathInput()}\n          {this.renderStorylineInput()}\n          <div className=\"flex justify-between\">\n            {this.renderGenreSelection()}\n            {this.renderRatingInput()}\n          </div>\n          <div className=\"flex justify-center mt-4\">\n            {this.renderSubmitButton()}\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nMovieForm.propTypes = {\n  movie: PropTypes.shape({\n    title: PropTypes.string,\n    storyline: PropTypes.string,\n    imagePath: PropTypes.string,\n    id: PropTypes.number,\n  }).isRequired,\n  onSubmit: PropTypes.func.isRequired,\n};\n\nexport default MovieForm;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport '../styles/styles.css';\nimport { Link } from 'react-router-dom';\n\nclass MovieCard extends React.Component {\n  render() {\n    const { movie: { id, title, storyline, imagePath, genre, rating } } = this.props;\n    return (\n      <div data-testid=\"movie-card\" className=\"w-96 bg-white flex flex-col rounded m-4\">\n        <img className=\"rounded-t h-56\" src={ imagePath } alt={ title } />\n        <div className=\"px-4 py-4\">\n          <p className=\"mb-4 font-bold\">{title}</p>\n          <p className=\"mb-8\">{storyline}</p>\n          <p className=\"mb-4 font-medium\">\n            {'Genre: '}\n            <span>\n              {genre}\n            </span>\n          </p>\n          <p className=\"mb-4 font-medium\">\n            {'Rating: '}\n            <span>\n              {rating}\n            </span>\n          </p>\n        <Link className=\"text-red-700 font-medium hover:text-red-600 transition duration-300 ease-in-out\" to={ `/movies/${id}` }>MOVIE DETAILS</Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nMovieCard.propTypes = {\n  movie: PropTypes.objectOf(\n    PropTypes.object,\n  ).isRequired,\n};\n\nexport default MovieCard;\n","const movies = [\n  {\n    id: 1,\n    title: 'Kingsglaive',\n    subtitle: 'Final Fantasy XV',\n    storyline: \"King Regis, who oversees the land of Lucis, commands his army of soldiers to protect the kingdom from the Niflheim empire's plans to steal the sacred crystal.\",\n    rating: 4.5,\n    imagePath: 'images/Kingsglaive_Final_Fantasy_XV.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 2,\n    title: 'Final Fantasy',\n    subtitle: 'Spirits Within',\n    storyline: 'A scientist makes a last stand on Earth with the help of a ragtag team of soldiers against an invasion of alien phantoms.',\n    rating: 4.5,\n    imagePath: 'images/Final_Fantasy_Spirits_Within.jpg',\n    bookmarked: false,\n    genre: 'fantasy',\n  },\n  {\n    id: 3,\n    title: 'Ghost In The Shell',\n    subtitle: 'Ghost In The Shell',\n    storyline: 'A hacker known as the Puppet Master is hunted by a female cyborg cop and her partner. This film is a revised version of Ghost in the Shell (1995).',\n    rating: 5,\n    imagePath: 'images/Ghost_In_The_Shell_2_0.jpg',\n    bookmarked: false,\n    genre: 'comedy',\n  },\n  {\n    id: 4,\n    title: 'Appleseed Alpha',\n    subtitle: 'Appleseed Alpha',\n    storyline: \"A young female soldier Deunan and her cyborg partner Briareos survive through the post World War 3 apocalyptic New York in search of human's future hope, the legendary city of Olympus.\",\n    rating: 3.8,\n    imagePath: 'images/Appleseed_Alpha.jpg',\n    bookmarked: true,\n    genre: 'action',\n  },\n  {\n    id: 5,\n    title: 'Resident Evil',\n    subtitle: 'Vendetta',\n    storyline: 'Chris Redfield enlists the help of Leon S. Kennedy and Rebecca Chambers to stop a death merchant, with a vengeance, from spreading a deadly virus in New York.',\n    rating: 4.2,\n    imagePath: 'images/Resident_Evil_Vendetta.jpg',\n    bookmarked: true,\n    genre: 'fantasy',\n  },\n];\n\nexport default movies;\n","import data from './movieData';\n\nlocalStorage.setItem('movies', JSON.stringify(data));\n\nconst readMovies = () => JSON.parse(localStorage.getItem('movies'));\nconst saveMovies = (movies) => localStorage.setItem('movies', JSON.stringify(movies));\n\nconst TIMEOUT = 2000;\nconst SUCCESS_STATUS = 'OK';\n\n// --------------------------------------------------------------------\n// A função simulateRequest simula uma requisição para uma API externa\n// Esse tipo de função que \"chama outra função\" é chamada de\n// \"currying function\" https://javascript.info/currying-partials\n// não se preocupe, estudaremos isso mais futuramente\n// --------------------------------------------------------------------\n\nconst simulateRequest = (response) => (callback) => {\n  setTimeout(() => {\n    callback(response);\n  }, TIMEOUT);\n};\n\nexport const getMovies = () => (\n  new Promise((resolve) => {\n    const movies = readMovies();\n    simulateRequest(movies)(resolve);\n  })\n);\n\nexport const getMovie = (movieId) => {\n  const movie = readMovies().find((mov) => mov.id === parseInt(movieId, 10));\n  return new Promise((resolve) => {\n    simulateRequest(movie)(resolve);\n  });\n};\n\nexport const updateMovie = (updatedMovie) => (\n  new Promise((resolve) => {\n    const movies = readMovies().map((movie) => {\n      if (movie.id === parseInt(updatedMovie.id, 10)) {\n        return { ...movie, ...updatedMovie };\n      }\n      return movie;\n    });\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const createMovie = (movieData) => (\n  new Promise((resolve) => {\n    let movies = readMovies();\n    const nextId = movies[movies.length - 1].id + 1;\n    const newMovie = { ...movieData, id: nextId };\n    movies = [...movies, newMovie];\n    saveMovies(movies);\n    simulateRequest(SUCCESS_STATUS)(resolve);\n  })\n);\n\nexport const deleteMovie = (movieId) => {\n  let movies = readMovies();\n  movies = movies.filter((movie) => movie.id !== parseInt(movieId, 10));\n  saveMovies(movies);\n\n  return new Promise((resolve) => {\n    simulateRequest({ status: SUCCESS_STATUS })(resolve);\n  });\n};\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Loading } from '../components';\nimport MovieCard from '../components/MovieCard';\nimport * as movieAPI from '../services/movieAPI';\nimport '../styles/styles.css';\n\nclass MovieList extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchMovies = this.fetchMovies.bind(this);\n    this.state = {\n      loading: true,\n      movies: [],\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovies();\n  }\n\n  async fetchMovies() {\n    const movies = await movieAPI.getMovies();\n    this.setState({\n      movies,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { loading, movies } = this.state;\n    return (\n      <section data-testid=\"movie-list\" className=\"w-full container mx-auto flex flex-col flex-wrap px-4 py-4 bg-black\">\n        <div>\n          { loading ? <Loading />\n            : <div className=\"w-full container mx-auto flex flex-wrap bg-black\">\n              { movies.map((movie) => <MovieCard key={ movie.title } movie={ movie } />) }\n            </div> \n          }\n        </div>\n        <div className=\"w-full flex justify-center items-center text-white\" >\n          <Link className=\"bg-red-700 px-2 py-2 rounded hover:bg-red-600 transition duration-200 ease-linear\" to=\"movie-cards-crud/movies/new\">ADICIONAR CARTÃO</Link>\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default MovieList;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport * as movieAPI from '../services/movieAPI';\nimport { Loading } from '../components';\n\nclass MovieDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.fetchMovie = this.fetchMovie.bind(this);\n    this.state = {\n      loading: true,\n      movie: {},\n    };\n  }\n\n  componentDidMount() {\n    this.fetchMovie();\n  }\n\n  fetchMovie = async () => {\n    const { match: { params } } = this.props;\n    const movie = await movieAPI.getMovie(params.id);\n    this.setState({\n      movie,\n      loading: false,\n    });\n  }\n\n  render() {\n    const { loading, movie } = this.state;\n    const { id, title, storyline, imagePath, genre, rating, subtitle } = movie;\n\n    const deleteMovie = () => { movieAPI.deleteMovie(id); };\n\n    return (\n      !loading ? (\n        <section className=\"w-full h-full flex justify-center items-center bg-black\">\n          <div data-testid=\"movie-details\" className=\"container w-2/6 h5/6 bg-white flex flex-col rounded m-4\">\n            <img className=\"rounded-t\" alt=\"Movie Cover\" src={ `../${imagePath}` } />\n            <div className=\"flex flex-col\">\n              <h1 className=\"m-2 mt-4 font-bold text-xl\">{ `Title: ${title}` }</h1>\n              <p className=\"m-2 font-semibold text-lg\">{ `Subtitle: ${subtitle}` }</p>\n              <p className=\"m-2\">{ `Storyline: ${storyline}` }</p>\n              <p className=\"m-2 font-medium\">{ `Genre: ${genre}` }</p>\n              <p className=\"m-2 font-medium\">{ `Rating: ${rating}` }</p>\n              <div className=\"flex justify-around mt-8 mb-4\">\n                <Link className=\"text-red-700 font-medium hover:text-red-600 transition duration-300\" to={ `movie-cards-crud/movies/${id}/edit` }>EDITAR</Link>\n                <Link\n                  className=\"text-red-700 font-medium hover:text-red-600 transition duration-300\"\n                  to=\"/movie-cards-crud\"\n                  onClick={ deleteMovie }\n                >\n                  DELETAR\n                </Link>\n                <Link className=\"text-red-700 font-medium hover:text-red-600 transition duration-300\" to=\"/movie-cards-crud\">VOLTAR</Link>\n              </div>\n            </div>\n          </div>\n        </section>\n      ) : <Loading />\n    );\n  }\n}\n\nMovieDetails.propTypes = ({\n  match: PropTypes.objectOf(PropTypes.string).isRequired,\n});\n\nexport default MovieDetails;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport MovieForm from '../components/MovieForm';\nimport * as movieAPI from '../services/movieAPI';\n\nclass NewMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.state = {\n      shouldRedirect: false,\n    };\n  }\n\n  handleSubmit(newMovie) {\n    movieAPI.createMovie(newMovie);\n    this.setState({ shouldRedirect: true });\n  }\n\n  render() {\n    const { shouldRedirect } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/movie-cards-crud\" />;\n    }\n    return (\n      <div data-testid=\"new-movie\" className=\"w-full mt-16 flex justify-center items-center\">\n        <MovieForm onSubmit={ this.handleSubmit } />\n      </div>\n    );\n  }\n}\nexport default NewMovie;\n","import React, { Component } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { Loading, MovieForm } from '../components';\nimport * as movieAPI from '../services/movieAPI';\n\nclass EditMovie extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: 'loading',\n      shouldRedirect: false,\n      movie: [],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.requestMovie = this.requestMovie.bind(this);\n  }\n\n  async componentDidMount() {\n    await this.requestMovie();\n  }\n\n  async handleSubmit(updatedMovie) {\n    await movieAPI.updateMovie(updatedMovie);\n    this.setState({\n      status: 'loading',\n      shouldRedirect: true,\n    });\n  }\n\n  async requestMovie() {\n    const { match: { params: { id } } } = this.props;\n    const movie = await movieAPI.getMovie(id);\n    this.setState({\n      status: 'loaded',\n      movie,\n    });\n  }\n\n  render() {\n    const { status, shouldRedirect, movie } = this.state;\n    if (shouldRedirect) {\n      return <Redirect to=\"/movie-cards-crud\" />;\n    }\n\n    if (status === 'loading') {\n      return <Loading />;\n    }\n\n    return (\n      <section className=\"w-full h-full flex justify-center\">\n        <div className=\"w-2/6 h-3/4 mt-16 bg-white flex justify-center items-center flex-wrap rounded px-4 py-4\">\n          <MovieForm movie={ movie } onSubmit={ this.handleSubmit } />\n        </div>\n      </section>\n    );\n  }\n}\nEditMovie.propTypes = {\n  match: PropTypes.shape({\n    params: PropTypes.shape({\n      id: PropTypes.number.isRequired,\n    }),\n  }).isRequired,\n};\n\nexport default EditMovie;\n","import React, { Component } from 'react';\n\nclass NotFound extends Component {\n  render() {\n    return <div data-testid=\"404-error\" className=\"text-white\">Página não encontrada</div>;\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport { BrowserRouter, Link, Route, Switch } from 'react-router-dom';\nimport MovieList from './pages/MovieList';\nimport MovieDetails from './pages/MovieDetails';\nimport NewMovie from './pages/NewMovie';\nimport EditMovie from './pages/EditMovie';\nimport NotFound from './pages/NotFound';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"h-screen bg-black overflow-x-hidden\">\n          <nav className=\"flex justify-center items-center align-middle text-white text-2xl font-extrabold h-24 bg-red-700\"><Link exact to=\"/movie-cards-crud\">Movie Card Library CRUD</Link></nav>\n          <Switch>\n            <Route path=\"/movies/new\" component={ NewMovie } />\n            <Route path=\"/movies/:id/edit\" component={ EditMovie } />\n            <Route exact path=\"/movie-cards-crud\" component={ MovieList } />\n            <Route path=\"/movies/:id\" component={ MovieDetails } />\n            <Route exact component={ NotFound } />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}